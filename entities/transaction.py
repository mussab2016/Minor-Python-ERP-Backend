from pydantic import BaseModel, Field
from datetime import datetime
from typing import Literal


class Transaction(BaseModel):
    """
    Represents a Transaction in the system.

    Attributes:
    - id: primary key (auto-generated by the database).
    - supplier: ID of the supplier (consumer of provider).
    - date: timestamp of the transaction.
    - product: id of the product involved.
    - type: 1 = income, -1 = outcome.
    - price: price per unit of the product.
    - quantity: number of units transacted.
    - tax: tax applied to the transaction.
    - discount: discount applied to the transaction.
    """

    id: int | None = Field(default=None, description="Primary key in the database")
    supplier_id: int = Field(..., description="ID of the supplier (consumer of provider)")
    date: datetime = Field(..., description="Date and time of the transaction")
    product_id: int = Field(..., description="Product id")
    type: Literal[1, -1] = Field(..., description="Transaction type: 1 = income, -1 = outcome")
    price: float = Field(default=0, ge=0, description="Unit price of the product")
    quantity: float = Field(default=0, ge=0, description="Quantity of the product")
    tax: float = Field(default=0, ge=0, description="Tax applied")
    discount: float = Field(default=0, ge=0, description="Discount applied")

    # Literal[1, -1] â†’ restricts the value strictly to 1 or -1.
